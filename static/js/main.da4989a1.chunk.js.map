{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","auto","width","height","margin","img","marginLeft","brand","color","backgroundColor","opacity","padding","fontFamily","textAlign","borderRadius","Axios","useAxios","data","loading","error","refetch","console","log","map","e","src","imgUrl","brandColor","onClick","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAOOA,EAAQ,CACbC,KAAK,CACHC,MAAM,QACNC,OAAO,OACPC,OAAO,SAETC,IAAI,CACFH,MAAM,QACNC,OAAO,QACPG,WAAW,QAEbC,MAAO,CACLC,MAAO,QACPC,gBAAiB,OACjBC,QAAQ,MACRC,QAAS,OACTC,WAAY,QACZR,OAAO,SACPS,UAAU,SACVC,aAAa,QASjB,SAASC,IAAS,IAAD,EAC6BC,YAC1C,6CAFa,0BACNC,EADM,EACNA,KAAMC,EADA,EACAA,QAASC,EADT,EACSA,MAASC,EADlB,KAKf,OADEC,QAAQC,IAAIL,GACVC,EAAgB,yCAChBC,EAAc,qCAGd,yBAAKnB,MAAOA,EAAMC,MAEfgB,EAAKM,KAAI,SAAAC,GAAC,OAAK,6BACV,yBAAKxB,MAAOA,EAAMK,IAAKoB,IAAKD,EAAEE,SAC9B,wBAAI1B,MAAOwB,EAAEG,YAAaH,EAAEjB,WAEpC,4BAAQqB,QAASR,GAAjB,YAKN,IAeeS,EAfH,WAAK,IAAD,EAEWC,IAAMC,SAAS,IAF1B,6BAIZ,OACI,6BAEH,kBAAChB,EAAD,QClDeiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.da4989a1.chunk.js","sourcesContent":["import {Form,Button} from 'react-bootstrap';\nimport './App.css';\nimport React, { Component, useState,useEffect } from 'react';\nimport axios from 'axios';\nimport useAxios from 'axios-hooks';\n\n\n const style = {\n  auto:{\n    width:\"400px\",\n    height:\"auto\",\n    margin:\" auto\"\n  },\n  img:{\n    width:\"225px\",\n    height:\"149px\",\n    marginLeft:\"50px\"\n  },\n  brand: {\n    color: \"white\",\n    backgroundColor: \"#000\",\n    opacity:\"0.7\",\n    padding: \"10px\",\n    fontFamily: \"Arial\",\n    margin:\"0 auto\",\n    textAlign:\"center\",\n    borderRadius:\"5px\"\n  }\n\n }\n\n\n\n\n\nfunction Axios() {\n  const [{ data, loading, error }, refetch] = useAxios(\n    'https://cars-demo-app.herokuapp.com/cars '\n  )\n    console.log(data)\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error!</p>\n  \n  return (\n      <div style={style.auto}>\n\n        {data.map(e => (<div>\n              <img style={style.img} src={e.imgUrl}></img>\n              <h3 style={e.brandColor}>{e.brand}</h3>\n          </div>))}\n      <button onClick={refetch}>refetch</button>\n    </div>\n  )\n}\n\nconst App = ()=>{\n\n    const [list,setList] = React.useState([]);   \n\n    return(\n        <div>\n      \n     <Axios/>\n     </div>\n    )\n}\n\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}